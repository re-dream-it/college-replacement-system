from loader import dp, bot, db
from aiogram import types, F
from states import Subscribe
from aiogram.fsm.context import FSMContext
from aiohttp import web
from time import sleep
from config import *
import asyncio
import keyboards

# BOT HANDLERS

# any message
async def check_user(id, username):
    user = await db.get_user(id)
    if not user:
        await db.add_user(id, username)
        user = await db.get_user(id)
        await bot.send_message(LOG_CHAN, f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!\n\nID: {id}\n–Æ–∑–µ—Ä–Ω–µ–π–º: @{username}")
    elif user['username'] != username:
        await db.update_username(id, username)
        await bot.send_message(LOG_CHAN, f"–ò–∑–º–µ–Ω–µ–Ω —é–∑–µ—Ä–Ω–µ–π–º!\n\nID: {id}\n–Æ–∑–µ—Ä–Ω–µ–π–º: @{username}")
    return user

# form start message
async def start_text(id):
    user = await db.get_user(id)
    
    if user['group_id']: 
        group = await db.get_group_byid(user['group_id'])
        user['group_name'] = group['name']
    else: user['group_name'] = '–Ω–µ –≤—ã–±—Ä–∞–Ω–∞'

    if user['teacher_id']: 
        teacher = await db.get_teacher_byid(user['teacher_id'])
        user['teacher_name'] = teacher['fullname']
    else: user['teacher_name'] = '–Ω–µ –≤—ã–±—Ä–∞–Ω'

    text = f"üè† *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*\n\n–í–∞—à–∞ –≥—Ä—É–ø–ø–∞: `{user['group_name']}`\n–í—ã–±—Ä–∞–Ω–Ω—ã–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: `{user['teacher_name']}`"
    return text

async def replacement_text(replacement):
    text = f"""üîî <b>–ù–æ–≤–∞—è –∑–∞–º–µ–Ω–∞!</b>
<b>ID:</b> <code>{replacement['replacement_id']}</code>
<b>–ò–∑–º–µ–Ω–µ–Ω–∏—è:</b> <code>{replacement['replacement_types']}</code>
<b>–ì—Ä—É–ø–ø–∞:</b> <code>{replacement['group_name']}</code>
<b>–î–∞—Ç–∞:</b> <code>{replacement['date']}</code>\n"""
    if not '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä—ã' in replacement['replacement_types']:
        text += f"""\n<b>‚úñÔ∏è –ë—ã–ª–æ</b>:
<b>–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å:</b> <code>{replacement['was_teacher_fullname']}</code>
<b>–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞:</b> <code>{replacement['was_discipline']}</code>
<b>–ù–æ–º–µ—Ä –ø–∞—Ä—ã:</b> <code>{replacement['was_slot_id']}</code>
<b>–ö–∞–±–∏–Ω–µ—Ç:</b> <code>{replacement['was_cabinet']}</code>\n"""
    if not '–û—Ç–º–µ–Ω–∞ –ø–∞—Ä—ã' in replacement['replacement_types']:
        text += f"""\n<b>‚úîÔ∏è –°—Ç–∞–ª–æ</b>:
<b>–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å:</b> <code>{replacement['became_teacher_fullname']}</code>
<b>–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞:</b> <code>{replacement['became_discipline']}</code>
<b>–ù–æ–º–µ—Ä –ø–∞—Ä—ã:</b> <code>{replacement['became_slot_id']}</code>
<b>–ö–∞–±–∏–Ω–µ—Ç:</b> <code>{replacement['became_cabinet']}</code>"""
    return text



# start
@dp.message(F.text == ('/start'))
async def execute_command(message: types.Message, state: FSMContext):
    await state.clear()
    user = await check_user(message.from_user.id, message.from_user.username)
    text = await start_text(message.from_user.id)

    await bot.send_message(message.from_user.id, f"üëã *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!* \n–≠—Ç–æ –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —Å–º–æ–∂–µ—Ç —É–≤–µ–¥–æ–º–ª—è—Ç—å –≤–∞—Å –æ –≤–∞—à–∏—Ö –∑–∞–º–µ–Ω–∞—Ö!\n\n–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã, –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–≤–æ—é –≥—Ä—É–ø–ø—É –∏–ª–∏ –Ω–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è.", parse_mode='markdown', reply_markup=await keyboards.main_keyboard())
    await bot.send_message(message.from_user.id, text, parse_mode='markdown', reply_markup=await keyboards.main_menu_keyboard())

# main menu
@dp.message(F.text == ('üè† –ì–ª–∞–≤–Ω–∞—è'))
async def execute_command(message: types.Message, state: FSMContext):
    await state.clear()
    user = await check_user(message.from_user.id, message.from_user.username)
    text = await start_text(message.from_user.id)

    await bot.send_message(message.from_user.id, text, parse_mode='markdown', reply_markup=await keyboards.main_menu_keyboard())

# help
@dp.message(F.text == ('‚ÑπÔ∏è –ü–æ–º–æ—â—å'))
async def execute_command(message: types.Message, state: FSMContext):
    await state.clear()
    await bot.send_message(message.from_user.id, f'<b>–í–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞?\n–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫:</b> @re_dream', parse_mode='html')

# back
@dp.callback_query(lambda call: call.data == "back")
async def back(callback_query: types.CallbackQuery, state: FSMContext):
    await state.clear()
    text = await start_text(callback_query.from_user.id)

    await bot.edit_message_text(chat_id=callback_query.from_user.id, message_id=callback_query.message.message_id, text=text, parse_mode='markdown', reply_markup=await keyboards.main_menu_keyboard())

# subscribe_group
@dp.callback_query(lambda call: call.data == "subscribe_group")
async def subscribe_group(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.edit_message_text(chat_id=callback_query.from_user.id, message_id=callback_query.message.message_id, text="üìö *–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã*  \n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, `201-–ò–¢-23`).", parse_mode='markdown', reply_markup=await keyboards.back_keyboard())
    await state.set_state(Subscribe.group)

# subscribe_teacher
@dp.callback_query(lambda call: call.data == "subscribe_teacher")
async def subscribe_teacher(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.edit_message_text(chat_id=callback_query.from_user.id, message_id=callback_query.message.message_id, text="üë©‚Äçüè´ *–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –§–ò–û –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è*  \n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –§–ò–û –≤–∞—à–µ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, `–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á`).", parse_mode='markdown', reply_markup=await keyboards.back_keyboard())
    await state.set_state(Subscribe.teacher)

# group_entered
@dp.message(F.text, Subscribe.group)
async def group_entered(message: types.Message, state: FSMContext):
    group = await db.get_group_byname(message.text)
    if group:
        await db.update_group(message.from_user.id, group['id'])
        await state.clear()
        await bot.send_message(message.from_user.id, f"‚úÖ *–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –≥—Ä—É–ø–ø—É* `{message.text}`.", parse_mode='markdown')
    else:
        await bot.send_message(message.from_user.id, f"‚ùå *–ì—Ä—É–ø–ø—ã* `{message.text}` *–Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.*\n–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥.", parse_mode='markdown')

# teacher_entered
@dp.message(F.text, Subscribe.teacher)
async def teacher_entered(message: types.Message, state: FSMContext):
    teacher = await db.get_teacher_byname(message.text)
    if teacher:
        await db.update_teacher(message.from_user.id, teacher['id'])
        await state.clear()
        await bot.send_message(message.from_user.id, f"‚úÖ *–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è* `{message.text}`.", parse_mode='markdown')
    else:
        await bot.send_message(message.from_user.id, f"‚ùå *–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è* `{message.text}` *–Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.*\n–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥.", parse_mode='markdown')

# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ–Ω—ã, —Å–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
async def accept_replace(request):
    data = await request.json()
    print(f'Got new replacement!\nID: {data['replacement_id']}')
    response = web.json_response({"status": "success", "message": "–†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞—Ç–∞"})
    asyncio.create_task(send_notifications_background(data))
    return response

# –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–º–µ–Ω
async def send_notifications_background(data):
    replacement = await db.get_replace(data['replacement_id'])
    text = await replacement_text(replacement)
    print('Sending notifications:')
    print(text)
    await bot.send_message(INFO_CHAN, text, parse_mode='html', reply_markup=await keyboards.site_keyboard())
    await bot.send_message(LOG_CHAN, f'–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–º–µ–Ω—ã ‚Ññ{replacement['replacement_id']} –Ω–∞—á–∞—Ç–∞!')

    i = 0
    users = await db.get_notify_users(replacement['group_id'], replacement['was_teacher_id'], replacement['became_teacher_id'])
    for user in users:
        try: 
            i+=1
            await bot.send_message(user['id'], text, parse_mode='html', reply_markup=await keyboards.site_keyboard())
            await asyncio.sleep(1.2)
        except Exception as e:
            print(e)
            if 'bot was blocked by the user' in str(e):
                await db.delete_user(user['id'])
                print(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user['id']} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞ –∏ –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–∑ –ë–î!')
            else:
                await bot.send_message(LOG_CHAN, f'–û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–∞—Å—Å—ã–ª–∫–∏ ‚Ññ{replacement['replacement_id']}: <code>{str(e)}</code>', parse_mode='html')

    await bot.send_message(LOG_CHAN, f'–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–º–µ–Ω—ã ‚Ññ{replacement['replacement_id']} –æ–∫–æ–Ω—á–µ–Ω–∞!\n–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {i}')

# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–º–µ–Ω—ã, —Å–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
async def delete_replace(request):
    data = await request.json()
    print(f'Replacement deleted!\nID: {data['replacement_id']}')
    response = web.json_response({"status": "success", "message": "–†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞—Ç–∞"})
    replacement = await db.get_replace(data['replacement_id'])
    asyncio.create_task(send_del_notifications_background(replacement))
    return response

# –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–º–µ–Ω
async def send_del_notifications_background(replacement):
    text = f"‚ö†Ô∏è –ó–∞–º–µ–Ω–∞ ‚Ññ{replacement['replacement_id']} –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞ –∏ –ø—Ä–æ–≤–æ–¥–∏—Ç—å—Å—è –Ω–µ –±—É–¥–µ—Ç!"
    print('Sending notifications:')
    print(text)
    await bot.send_message(INFO_CHAN, text, parse_mode='html', reply_markup=await keyboards.site_keyboard())
    await bot.send_message(LOG_CHAN, f'–†–∞—Å—Å—ã–ª–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–º–µ–Ω—ã ‚Ññ{replacement['replacement_id']} –Ω–∞—á–∞—Ç–∞!')

    i = 0
    users = await db.get_notify_users(replacement['group_id'], replacement['was_teacher_id'], replacement['became_teacher_id'])
    for user in users:
        try: 
            i+=1
            await bot.send_message(user['id'], text, parse_mode='html', reply_markup=await keyboards.site_keyboard())
            await asyncio.sleep(1.1)
        except Exception as e:
            print(e)
            if 'bot was blocked by the user' in str(e):
                db.delete_user(user['id'])
                print(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user['id']} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞ –∏ –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–∑ –ë–î!')
            else:
                await bot.send_message(LOG_CHAN, f'–û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–∞—Å—Å—ã–ª–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–º–µ–Ω—ã ‚Ññ{replacement['replacement_id']}: <code>{str(e)}</code>', parse_mode='html')

    await bot.send_message(LOG_CHAN, f'–†–∞—Å—Å—ã–ª–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–º–µ–Ω—ã ‚Ññ{replacement['replacement_id']} –æ–∫–æ–Ω—á–µ–Ω–∞!\n–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {i}')