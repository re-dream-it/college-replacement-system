from loader import dp, bot, db
from aiogram import types, F
from filters import admin_filter
from states import Subscribe
from aiogram.fsm.context import FSMContext
from aiohttp import web
from time import sleep
from config import *
import asyncio
import keyboards

# BOT HANDLERS

# start
@dp.message(F.text == ('/start'))
async def execute_command(message: types.Message, state: FSMContext):
    await state.clear()

    user = await db.get_user(message.from_user.id)
    if not user:
        await db.add_user(message.from_user.id, message.from_user.username)
        await bot.send_message(LOG_CHAN, f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!\n\nID: {message.from_user.id}\n–Æ–∑–µ—Ä–Ω–µ–π–º: @{message.from_user.username}")
    elif user['username'] != message.from_user.username:
        await db.update_username(message.from_user.id, message.from_user.username)
        await bot.send_message(LOG_CHAN, f"–ò–∑–º–µ–Ω–µ–Ω —é–∑–µ—Ä–Ω–µ–π–º!\n\nID: {message.from_user.id}\n–Æ–∑–µ—Ä–Ω–µ–π–º: @{message.from_user.username}")
        
    await bot.send_message(message.from_user.id, f"üëã *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!* \n–≠—Ç–æ –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —Å–º–æ–∂–µ—Ç —É–≤–µ–¥–æ–º–ª—è—Ç—å –≤–∞—Å –æ –≤–∞—à–∏—Ö –∑–∞–º–µ–Ω–∞—Ö!\n\n–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã, –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–≤–æ—é –≥—Ä—É–ø–ø—É –∏–ª–∏ –Ω–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è.", parse_mode='markdown', reply_markup=await keyboards.main_menu_keyboard())

# back
@dp.callback_query(F.text == ('back'))
async def back(callback_query: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await bot.edit_message_text(chat_id=callback_query.from_user.id, message_id=callback_query.message.message_id, text=f"üëã *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!* \n–≠—Ç–æ –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π —Å–º–æ–∂–µ—Ç —É–≤–µ–¥–æ–º–ª—è—Ç—å –≤–∞—Å –æ –≤–∞—à–∏—Ö –∑–∞–º–µ–Ω–∞—Ö!\n\n–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã, –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Å–≤–æ—é –≥—Ä—É–ø–ø—É –∏–ª–∏ –Ω–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è.", parse_mode='markdown', reply_markup=await keyboards.main_menu_keyboard())

# subscribe_group
@dp.callback_query(lambda call: call.data == "subscribe_group")
async def subscribe_group(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.edit_message_text(chat_id=callback_query.from_user.id, message_id=callback_query.message.message_id, text="üìö *–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã*  \n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, `201-–ò–¢-23`).", parse_mode='markdown')
    await state.set_state(Subscribe.group)

# subscribe_teacher
@dp.callback_query(lambda call: call.data == "subscribe_teacher")
async def subscribe_teacher(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.edit_message_text(chat_id=callback_query.from_user.id, message_id=callback_query.message.message_id, text="üë©‚Äçüè´ *–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω–æ–µ –§–ò–û –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è*  \n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –§–ò–û –≤–∞—à–µ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, `–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á`).", parse_mode='markdown')
    await state.set_state(Subscribe.teacher)

# group_entered
@dp.message(F.text, Subscribe.group)
async def group_entered(message: types.Message, state: FSMContext):
    if message.text in ['201-–ò–¢-23', '213-–°–í-22']:
        # await db.subscribe_group(message.from_user.id, message.text)
        await state.clear()
        await bot.send_message(message.from_user.id, f"‚úÖ *–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –≥—Ä—É–ø–ø—É* `{message.text}`.", parse_mode='markdown')
    else:
        await bot.send_message(message.from_user.id, f"‚ùå *–ì—Ä—É–ø–ø—ã* `{message.text}` *–Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.*", parse_mode='markdown')

# teacher_entered
@dp.message(F.text, Subscribe.teacher)
async def teacher_entered(message: types.Message, state: FSMContext):
    if message.text in ['–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á', '–ü–µ—Ç—Ä–æ–≤ –ü–µ—Ç—Ä –ü–µ—Ç—Ä–æ–≤–∏—á']:
        # await db.subscribe_teacher(message.from_user.id, message.text)
        await state.clear()
        await bot.send_message(message.from_user.id, f"‚úÖ *–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è* `{message.text}`.", parse_mode='markdown')
    else:
        await bot.send_message(message.from_user.id, f"‚ùå *–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è* `{message.text}` *–Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.*", parse_mode='markdown')

# test_notification
@dp.message(F.text == ('/test'))
async def test_notification(message: types.Message):
    await bot.send_message(message.from_user.id, f'üîî *–ó–∞–º–µ–Ω–∞*\n*–¢–∏–ø:* –ó–∞–º–µ–Ω–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è\n*–ì—Ä—É–ø–ø–∞: 201-–ò–¢-23*\n\n*‚úñÔ∏è –ë—ã–ª–æ*:\n*–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å:* –°–∏–¥–æ—Ä–æ–≤ –°.–°.\n*–ù–æ–º–µ—Ä –ø–∞—Ä—ã:* 5\n*–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞:* –°–û.03.02 –§–∏–∑–∏–∫–∞ \n*–ö–∞–±–∏–Ω–µ—Ç: 415* \n\n*‚úîÔ∏è –°—Ç–∞–ª–æ*:\n*–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: * –ö—É–∑–Ω–µ—Ü–æ–≤ –ö.–ö.	\n*–ù–æ–º–µ—Ä –ø–∞—Ä—ã: *5\n*–î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞: *–°–û.07.06 –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ\n*–ö–∞–±–∏–Ω–µ—Ç: * 105\n*–î–∞—Ç–∞:* 12.03.2025', parse_mode='markdown')
    

# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å, —Å–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
async def accept_replace(request):
    data = await request.json()
    print(data)
    response = web.json_response({"status": "success", "message": "–†–∞—Å—Å—ã–ª–∫–∞ –Ω–∞—á–∞—Ç–∞"})
    asyncio.create_task(send_notifications_background(data))

    return response

# –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–º–µ–Ω
async def send_notifications_background(data):
    for i in range(0, 500):
        print('Sending notification:', i)
        await asyncio.sleep(0.1)  # –ò–º–∏—Ç–∞—Ü–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏